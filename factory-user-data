#!/bin/bash

# list of diretories to copy
TO_COPY=(".pedalboards" "data")

function check {
    local LIST="$(eval $1),"

    for i in ${LIST}; do
        if [[ "${i::-1}" == "$2" ]]; then
            return 0
        fi
    done

    return 1
}

function list_plaforms {
    local PLATS
    for d in mod*/; do
        PLATS+="${d%/}, "
    done

    echo ${PLATS::-2}
}

function list_actions {
    echo "retrieve, deploy"
}

function check_plaform {
    check list_plaforms "$1"
}

function check_action {
    check list_actions "$1"
}

function show_usage {
    echo -e "Usage:\t$0 <platform> <action>"
    echo -e "\tplatform: $(list_plaforms)"
    echo -e "\taction: $(list_actions)"
    exit 1
}

function requirements {
    if ! command -v git > /dev/null; then
        echo "this script requires 'git' command"
        exit 1
    fi

    if ! command -v sshpass > /dev/null; then
        echo "this script requires 'sshpass' command"
        exit 1
    fi
}

function git_me {
    git $@
    if [[ $? != 0 ]]; then
        echo "git command failed probably due conflict"
        echo "please solve it manually and try again"
        echo "the last command was: git $@"
        exit 1
    fi
}

function wait_mod {
    while true; do
        if command -v ifconfig > /dev/null; then
            MOD_IP=$(ifconfig | grep -oE "192\.168\.(50|51)\." | head -1)
        elif command -v ip > /dev/null; then
            MOD_IP=$(ip route | grep -oE "192\.168\.(50|51)\." | head -1)
        else
            echo "command 'ifconfig' or 'ip' is required"
            exit 1
        fi

        if [[ -z ${MOD_IP} ]]; then
            echo "Waiting MOD connection"
            sleep 1
        else
            MOD_IP="${MOD_IP}1"
            break
        fi
    done
    echo "MOD connected at ${MOD_IP}"
}

function copy_key {
    # checking access using user key
    ssh -o "PasswordAuthentication no" root@${MOD_IP} "touch /dev/null" 2>/dev/null
    if [[ $? == 0 ]]; then
        return 0
    fi

    ssh-copy-id root@${MOD_IP}
}

function retrieve {
    echo "retrieving new factory data from MOD"

    LOCAL_BACKUP="/tmp/mod-factory-data/$1-$(date +%s)"
    MOD_BACKUP=/tmp/new-factory-data

    # create backup directories
    # in the case something goes wrong is still a way to recover the data yet
    mkdir -p ${LOCAL_BACKUP}
    sshpass -p mod ssh root@${MOD_IP} "rm -rf ${MOD_BACKUP} && mkdir -p ${MOD_BACKUP}"

    for d in ${TO_COPY[@]}; do
        # move files to backup dir (local)
        mv $1/$d ${LOCAL_BACKUP}

        # copy data from MOD to user's PC
        sshpass -p mod scp -r root@${MOD_IP}:/root/$d $1/

        # move files to backup dir (device)
        sshpass -p mod ssh root@${MOD_IP} "cp -rf /root/$d /tmp/new-factory-data"
    done

    # update plugins list
    sshpass -p mod ssh root@${MOD_IP} "ls -1 /root/.lv2 | tr -d '/'" > $1/plugins-list.txt

    # restart services
    sshpass -p mod ssh root@${MOD_IP} "systemctl restart jack2 mod-ui"

    # add possible new files to git
    git_me add $1

    echo "committing changes"
    GIT_USER=$(git config user.name)
    git commit -am "factory user data updated by ${GIT_USER}"

    echo "uploading recent changes to remote repository"
    git_me pull --rebase
    git_me push

    echo "done"
}

function deploy {
    echo "downloading the latest user data from remote repository"
    git_me pull --rebase

    # create dir to backup user data
    USER_BACKUP=/tmp/user-data-backup
    sshpass -p mod ssh root@${MOD_IP} "mkdir -p ${USER_BACKUP}"

    echo "deploying factory data to MOD"
    for d in ${TO_COPY[@]}; do
        sshpass -p mod ssh root@${MOD_IP} "mv /root/$d ${USER_BACKUP}"
        sshpass -p mod scp -r "$1/$d" root@${MOD_IP}:/root/
    done

    sshpass -p mod ssh root@${MOD_IP} "sync"

    echo "restarting services"
    sshpass -p mod ssh root@${MOD_IP} "systemctl restart jack2 mod-ui"

    echo "done"
}

# check arguments
if [[ "$#" != "2" ]] ||
   ! check_plaform "$1" ||
   ! check_action "$2"; then
    show_usage
fi

requirements
wait_mod

# execute action
eval $2 $1
